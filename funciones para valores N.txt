import numpy as np

def mediana_tiempos(func, A, B, C, resultado):
    tiempos = [tiempo_ejecucion(func, A, B, C, resultado) for _ in range(25)]
    return np.median(tiempos)

valores_N = [2**i for i in range(10, 17)]
speedups = []

for N in valores_N:
    # Generar datos de prueba
    A = [random.randint(-32768, 32767) for _ in range(N)]
    B = [random.uniform(0, 10) for _ in range(N)]
    C = [random.randint(-32768, 32767) for _ in range(N)]
    
    # Convertimos las listas en arreglos ctypes
    A_ctypes = (ctypes.c_int * N)(*A)
    B_ctypes = (ctypes.c_double * N)(*B)
    C_ctypes = (ctypes.c_int * N)(*C)
    
    tiempo_python = mediana_tiempos(calcularS, A, B, C, [0.0])
    tiempo_ctypes = mediana_tiempos(lib.calcularS, A_ctypes, B_ctypes, C_ctypes, ctypes.byref(ctypes.c_float(0)))
    
    speedup = tiempo_python / tiempo_ctypes
    speedups.append(speedup)

# Gr치fico
plt.plot(valores_N, speedups, marker='o')
plt.xscale('log', base=2)
plt.xlabel('Tama침o de N')
plt.ylabel('SpeedUp')
plt.title('SpeedUp en funci칩n del tama침o de N')
plt.grid(True, which="both", ls="--", c='0.65')
plt.show()
